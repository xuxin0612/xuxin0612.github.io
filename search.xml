<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Git Maven Tomcat deploy.sh]]></title>
    <url>%2F2017%2F09%2F30%2Fgit-maven-tomcat-ci-script%2F</url>
    <content type="text"><![CDATA[Recently took over a computer, too lazy to install Jenkins, then wrote a simple deployment scripts, welcome to discuss about it.123456789101112131415161718192021222324252627282930313233343536373839#!/bin/bashBRANCH="dev"TODAY=$(date +"%Y-%m-%d")PRO_NAME="mkt-admin"GIT_HOME="/home/app/git_repo/mkt-admin"TOMCAT_NAME="tomcat-pay-8080"TOMCAT_HOME=/usr/local/$&#123;TOMCAT_NAME&#125;cd $&#123;GIT_HOME&#125;git fetchgit checkout $&#123;BRANCH&#125;echo "Start pull code..."git pullmvn clean install -Dmaven.test.skip=true -e -Ucd $TOMCAT_HOMEecho "Shutdown Tomcat..."./bin/shutdown.shsleep 20echo "Testing Tomcat status..."TOMCAT_PID=$( ps aux | grep $&#123;_TOMCAT_NAME&#125; | grep -v grep | awk '&#123;print $2&#125;' )echo "Get Tomcat PID: " $TOMCAT_PIDif [[ $&#123;TOMCAT_PID&#125; ]] # if PID existsthen echo "PID exists, cannot shutdown Tomcat successfully." #echo "Killing..." #kill -9 $&#123;_TOMCAT_PID&#125; #sleep 5 # Considering strongly killing processes leading to accidental error, so conservative to opt out and manual processing it. echo "Exiting..." exit 1else echo "PID is not exists, ready for start."firm -rf webapps/$&#123;PRO_NAME&#125;*rm -rf work/*cp $&#123;GIT_HOME&#125;/target/mkt-admin.war webapps/sleep 1echo "Start Tomcat..."./bin/startup.shtailf logs/localhost.$&#123;TODAY&#125;.log]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Ci</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Logback Manual(Section 1)]]></title>
    <url>%2F2017%2F01%2F22%2Flogback-manual-Ch1%2F</url>
    <content type="text"></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>logback</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown Expansion]]></title>
    <url>%2F2017%2F01%2F16%2Fmarkdown-expansion%2F</url>
    <content type="text"><![CDATA[This article mainly tells the rest of common markdown syntax. Markdown ExpansionCodeTo coding in Markdown, you preface the phrase with a TAB or four blanks, you also surround code block with ``` ```, like ```hello world``` And to write inline code, you can surround words with backticks(``), like `TAB`. Separator LineTo add a separator line, you use three or more characters such as * or - or _ in a line. 123***------___ Strike ThroughStrike Through. Surround words with tilde(~~ ~~), like1~~Strike Through~~ TablesTables are created by adding pipes as dividers between each cell, and by adding a line of dashes (also separated by bars) beneath the header. Note that the pipes do not need to be vertically aligned. 12345| Option | Description || ------ | ----------- || data | path to data files to supply the data that will be passed into templates. || engine | engine to be used for processing templates. Handlebars is the default. || ext | extension to be used for dest files. | Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. Named AnchorsNamed anchors enable you to jump to the specified anchor point on the same page. 1234# Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) will jump to these sections: 12345678#### Chapter 1 &lt;a id=&quot;chapter-1&quot;&gt;&lt;/a&gt;Content for chapter one.#### Chapter 2 &lt;a id=&quot;chapter-2&quot;&gt;&lt;/a&gt;Content for chapter one.#### Chapter 3 &lt;a id=&quot;chapter-3&quot;&gt;&lt;/a&gt;Content for chapter one. Character EscapeThe backslash (\) is used to insert characters that have special roles in the Markdown grammar, like:123456789101112\`*_&#123;&#125;[]()#+-.!]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown Note]]></title>
    <url>%2F2017%2F01%2F15%2Fmarkdown-note%2F</url>
    <content type="text"><![CDATA[Markdown is a better way to write content for the web. So spending several minutes learning it is beneficial for us. Markdown SyntaxItalics and BoldTo make a phrase italic in Markdown, you can surround words with an underscore ( _ ).1_Writing in Markdown_ is not that hard! Writing in Markdown is not that hard! Similarly, to make phrases bold in Markdown, you can surround words with two asterisks ( ** ).1**Writing in Markdown** is not that hard! Writing in Markdown is not that hard! HeadersAs their name implies, they act like titles or subtitles above sections.There are six types of headers, in decreasing sizes:To make headers in Markdown, you preface the phrase with a hash mark (#). You place the same number of hash marks as the size of the header you want. For example, for a header one, you’d use one hash mark (# Header One), while for a header three, you’d use three (### Header Three).123456# Header one## Header two### Header three#### Header four##### Header five###### Header six LinksTo create an hyperlink link, you wrap the link text in brackets ( [ ] ), and then you wrap the link in parenthesis ( ( ) )1Search about [On the way](https://xuxin0612.github.io "welcome to my site") Search about On the way Or123Search about [On the way][site][site]: https://xuxin0612.github.io Search about On the way ImagesTo create an inline image link, enter an exclamation point ( ! ), wrap the alt text in brackets ( [ ] ), and then wrap the link in parenthesis ( ( ) ).1![site-author-image](https://xuxin0612.github.io/uploads/59572399266843.png) or 123![site-author-image][author image][author image]: https://xuxin0612.github.io/uploads/59572399266843.png Alt text is a phrase or sentence that describes the image for the visually impaired.1![site-author-image](https://xuxin0612.github.io/uploads/59572399266844.png) Block QuotesTo create a block quote, all you have to do is preface a line with the “greater than” caret (&gt;).1234&gt; To create a block quote, allyou have to do is preface a line with the "greater than" caret (&gt;).To create a block quote, all you have to do is preface a line with the "greater than" caret (&gt;). To create a block quote, allyou have to do is preface a line with the “greater than” caret (&gt;). To create a block quote, all you have to do is preface a line with the “greater than” caret (&gt;). ListsTo create an unordered list, you’ll want to preface each item in the list with an asterisk ( * ).1234* Milk* Eggs* Salmon* Butter Milk Eggs Salmon Butter An ordered list is prefaced with numbers, instead of asterisks.1231. carrot2. cabbage * lettuce Crack three eggs over a bowl Pour a gallon of milk into the bowl Rub the salmon vigorously with butter Drop the salmon into the egg-milk bowl To make a list with more depth, or, to nest one list within another, all you need to do is to indent each asterisk one space more than the preceding item.123456789* Vegetables * carrot * cabbage * lettuce* Fruits * apple * pear * mango * mango juice Vegetables carrot cabbage lettuce Fruits apple pear mango mango juice]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Command(Section 3)]]></title>
    <url>%2F2017%2F01%2F08%2Fgit-command-3%2F</url>
    <content type="text"><![CDATA[This section is used to record some problems and solutions. Welcome to ask questions and discuss them. Q &amp; AQ1If I want to abandon changes on a branch like dev and fetch the remote banch of the same name?1$ git checkout -B dev If -B is given, is created if it doesn’t exist; otherwise, it is reset. This is the transactional equivalent of12$ git branch -f &lt;branch&gt; [&lt;start point&gt;]$ git checkout &lt;branch&gt; Q2when someone build a new branch on remote repository, but I couldn’t find the new-built branch on my remote branches on my computer.1$ git fetch -p The command will fetch remote branches again if the branch has been added, removed or changed. Q3You are needed to fix bugs on a new emergency branch on the same remote repository when you develop on the feature branch.But the feature branch counldn’t be pushed to the remote repository because the develop work is not finished. Now you shouldsave you work on the feature branch at first.1234567git stash``` The command saves your local modifications away and reverts the working directory to match the HEAD commit.And then checkout the fixbug branch and fix bugs. After you completed the work on the fixbug branch and pushed it to the remote repository, you checkout the origin feature branch and restore the changes you saved.```bashgit stash apply stash@&#123;0&#125; Then you could continue your previous work.]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Command(Section 2)]]></title>
    <url>%2F2017%2F01%2F07%2Fgit-command-2%2F</url>
    <content type="text"><![CDATA[Now we could learn more about git. Advanced referenceClone a repository into a new directory1$ git clone git@github.com:xuxin0612/pythonLearning.git my-pythonLearning Switch branches1$ git checkout -b dev List branches1$ git branch -a Create branches1$ git branch dev Delete branches1$ git branch -d dev Merge the branch into the current branch1$ git merge —-no-ff -m “merge with no-ff” dev Push the branch into the remote repository1$ git push origin dev:dev Config the username and email of git12$ git config user.name “scott”$ git config user.email “xuxin0612@gmail.com” Pull the newest changes into the current banch1$ git pull Build a tag1$ git tag v1.0 Look at all the tags1$ git tag v1.0 Delete the tag1$ git tag -d v1.0 Push the tag into the remote repository1$ git push origin v1.0]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Git Command(Section 1)]]></title>
    <url>%2F2017%2F01%2F06%2Fgit-command%2F</url>
    <content type="text"><![CDATA[At first, let’s look at a common example for using git. Example123456$ echo "# pythonLearning" &gt;&gt; README.md$ git init$ git add README.md$ git commit -m "first commit"$ git remote add origin git@github.com:xuxin0612/pythonLearning.git$ git push -u origin master ReferenceCreate an empty Git repository or reinitialize an existing one1$ git init Add file contents to the index1$ git add xx.txt Show the working tree status1$ git status Record changes to the repository1$ git commit -m “add xx.txt” Show changes between commits, commit and working tree, etc12$ echo "# some changes" &gt;&gt; xx.txt$ git diff xx.txt Show commit logs1$ git log —-pretty=oneline Reset current HEAD to the specified state1$ git reset —-hard HEAD^ &nbsp; &nbsp; or1$ git reset —-hard commit_id See and Manage the history of referance logs1$ git reflog Restore working tree files that are modified or deleted12$ rm -rf xx.txt$ git checkout -- xx.txt Remove files from the working tree and from the index1$ git rm xx.txt Associate a remote repository1$ git remote add origin git@github.com:xuxin0612/pythonLearning.git Add upstream, push the current branch1$ git push -u origin master:master]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F01%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>